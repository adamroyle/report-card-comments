{"version":3,"sources":["utils/useSessionStorage.js","App.js","reportWebVitals.js","index.js"],"names":["useSessionStorage","key","defaultValue","useState","stored","sessionStorage","getItem","JSON","parse","getSessionStorageOrDefault","value","setValue","useEffect","setItem","stringify","STORAGE_PREFIX","App","text","setText","limitString","setLimitString","parseInt","limit","setLimit","className","style","width","fontSize","padding","lineHeight","fontFamily","letterSpacing","onChange","e","target","length","type","border","background","color","intValue","isNaN","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAUO,SAASA,EAAkBC,EAAKC,GAAe,IAAD,EACzBC,mBAT5B,SAAoCF,EAAKC,GACvC,IAAME,EAASC,eAAeC,QAAQL,GACtC,OAAKG,EAGEG,KAAKC,MAAMJ,GAFTF,EAOPO,CAA2BR,EAAKC,IAFiB,mBAC5CQ,EAD4C,KACrCC,EADqC,KASnD,OAJAC,qBAAU,WACRP,eAAeQ,QAAQZ,EAAKM,KAAKO,UAAUJ,MAC1C,CAACT,EAAKS,IAEF,CAACA,EAAOC,G,WCbXI,EAAc,OAiELC,MA/Df,WAAgB,IAAD,EACWhB,EAAkB,GAAD,OAAIe,EAAJ,SAA2B,IADvD,mBACNE,EADM,KACAC,EADA,OAEyBlB,EAAkB,GAAD,OAClDe,EADkD,UAErD,QAJW,mBAENI,EAFM,KAEOC,EAFP,OAMajB,oBAAS,kBAAMkB,SAASF,EAAa,OANlD,mBAMNG,EANM,KAMCC,EAND,KAQb,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,IAAD,CACEC,MAAO,CACLC,MAAO,QACPC,SAAU,GACVC,QAAS,MACTC,WAAY,IACZC,WAAY,YACZC,cAAe,UAEjBrB,MAAOO,EACPe,SAAU,SAACC,GAAD,OAAOf,EAAQe,EAAEC,OAAOxB,UAEpC,8BACGO,EAAKkB,OADR,IAEE,uBACEC,KAAK,OACL1B,MAAOS,EACPM,MAAO,CACLY,OAAQ,EACRC,WAAY,cACZC,MAAO,UACPZ,SAAU,UACVD,MAAM,GAAD,OAAgC,IAA1BP,EAAYgB,OAAS,GAA3B,OAEPH,SAAU,SAACC,GACTb,EAAea,EAAEC,OAAOxB,OACxB,IAAM8B,EAAWnB,SAASY,EAAEC,OAAOxB,MAAO,IACrC+B,MAAMD,IAAWjB,EAASiB,MAEhC,IAjBL,aAkBa,OAcZvB,EAAKkB,OAASb,GACb,8BAAIL,EAAKkB,OAASb,EAAlB,mCCpDKoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.18f11040.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction getSessionStorageOrDefault(key, defaultValue) {\n  const stored = sessionStorage.getItem(key);\n  if (!stored) {\n    return defaultValue;\n  }\n  return JSON.parse(stored);\n}\n\nexport function useSessionStorage(key, defaultValue) {\n  const [value, setValue] = useState(\n    getSessionStorageOrDefault(key, defaultValue)\n  );\n\n  useEffect(() => {\n    sessionStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Textarea from \"react-autosize-textarea\";\nimport { useSessionStorage } from \"./utils/useSessionStorage\";\n// import { fixComment } from \"./utils/fixComment\";\n\nconst STORAGE_PREFIX = `RCC_`;\n\nfunction App() {\n  const [text, setText] = useSessionStorage(`${STORAGE_PREFIX}_text`, \"\");\n  const [limitString, setLimitString] = useSessionStorage(\n    `${STORAGE_PREFIX}_limit`,\n    \"1500\"\n  );\n  const [limit, setLimit] = useState(() => parseInt(limitString, 10));\n  // const fixedText = fixComment(text);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Textarea\n          style={{\n            width: \"45rem\",\n            fontSize: 16,\n            padding: \"1em\",\n            lineHeight: 1.5,\n            fontFamily: \"Helvetica\",\n            letterSpacing: \"0.04em\",\n          }}\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n        />\n        <p>\n          {text.length}/\n          <input\n            type=\"text\"\n            value={limitString}\n            style={{\n              border: 0,\n              background: \"transparent\",\n              color: \"inherit\",\n              fontSize: \"inherit\",\n              width: `${(limitString.length + 1) * 0.5}em`,\n            }}\n            onChange={(e) => {\n              setLimitString(e.target.value);\n              const intValue = parseInt(e.target.value, 10);\n              if (!isNaN(intValue)) setLimit(intValue);\n            }}\n          />{\" \"}\n          characters{\" \"}\n          {/* {fixedText !== text && (\n            <a\n              href=\"#a\"\n              style={{ color: \"inherit\" }}\n              onClick={(e) => {\n                e.preventDefault();\n                setText(fixedText);\n              }}\n            >\n              Fix\n            </a>\n          )} */}\n        </p>\n        {text.length > limit && (\n          <p>{text.length - limit} characters over limit!</p>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}